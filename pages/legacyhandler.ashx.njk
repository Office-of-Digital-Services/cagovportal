---
layout: null
permalink: legacyhandler.ashx
eleventyExcludeFromCollections: true
---
<%@ WebHandler Language="C#" Class="ItemRedirectHandler" %>

using System;
using System.Web;

public class ItemRedirectHandler : IHttpHandler
{
    // Declare a readonly 2-dimensional array to store the redirects
    private static readonly string[,] redirects = new string[,]
    {
      // Begin Manual entries
      {"/departments/237/", "/agency/?item=governor%E2%80%99s-office-of-business-and-economic-development"},
      {"/departments/283/services/75/", "/service/?item=get-a-visitors-guide"},
      {"/departments/208/services/1110/", "/service/?item=job-training-in-san-diego"},
      {"/departments/208/services/1114/", "/service/?item=job-training-in-sacramento"},
      {"/departments/208/services/1111/", "/service/?item=job-training-in-orange-county"},
      {"/departments/208/services/1113/", "/service/?item=job-training-in-madera"},
      {"/departments/208/services/1112/", "/service/?item=job-training-in-long-beach"},
      {"/departments/193/services/15/", "/service/?item=pay-traffic-ticket"},
      // End Manual entries

      {%- for agency in state_entity.agencies | sortBy("AgencyId") %}
      {
        "/departments/{{agency.AgencyId}}/",
        "/agency/?item={{agency.FriendlyName | lower | replace(" ", "-") | safe}}"
      },
      {%- endfor %}
      {%- for service in state_entity.services | sortBy("ServiceId") %}
      {
        "/departments/{{service.AgencyId}}/services/{{service.ServiceId}}/",
        "/service/?item={{service.ServiceName | lower | replace(" ", "-") | safe}}"
      }{{"," if not loop.last}}
      {%- endfor %}
 
    };

    public void ProcessRequest(HttpContext context)
    {
        // Retrieve the 'item' and 'path' query string parameters
        string item = context.Request.QueryString["item"];
        string path = context.Request.QueryString["path"];

        // Check if both 'item' and 'path' parameters are present
        if (!string.IsNullOrEmpty(item) && !string.IsNullOrEmpty(path))
        {
            // Replace "dashline" with "-" in the 'item' string
            // Some old indexes have this
            item = item.Replace("dashline", "-");

            // Construct the current path using the 'item' and 'path' parameters
            string currentPath = String.Format("/{0}/?item={1}", path, item).ToLower();
            string redirectLocation = null;

            // Iterate through the redirects array to find a matching legacy path
            for (int i = 0; i < redirects.GetLength(0); i++)
            {
                string targetPath = redirects[i, 1].ToLower();
                if (targetPath.StartsWith(currentPath) || currentPath.StartsWith(targetPath))
                {
                    // If a match is found, set the target path
                    redirectLocation = redirects[i, 0];
                    break;
                }
            }

            // If a target path is found, redirect to it
            if (redirectLocation != null)
            {
                context.Response.StatusCode = 301; // Permanent Redirect
                context.Response.RedirectLocation = redirectLocation;
                context.Response.End();
            }
            else
            {
                // If no matching target path is found, return a 404 Not Found status
                context.Response.StatusCode = 400; // Not Found
                context.Response.Headers.Add("X-Status-Message", "Target path not found. "+currentPath);
            }
        }
        else
        {
            // If 'item' or 'path' parameters are missing, return a 400 Bad Request status
            context.Response.StatusCode = 400; // Bad Request
            context.Response.Write("Item or path parameter is missing.");
        }
    }

    // Indicate that the handler is not reusable
    public bool IsReusable
    {
        get { return false; }
    }
}



